from telegram import Update
from telegram.constants import ChatType
from telegram.ext import ContextTypes

from ..model.collection import Collection
from ._util import chat_type


@chat_type(ChatType.GROUP)
async def unspend(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    collection: Collection | None = context.chat_data.get("collection")
    if not collection:
        await update.effective_chat.send_message(
            f"ü§î –ù–∏–∫–∞–∫–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–µ –±—ã–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–æ.\n\n/help@{context.bot.username}"
        )
        return

    if not collection.spends:
        await update.effective_chat.send_message("ü§î –ù–µ –∑–∞–Ω–µ—Å–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞—Ç—ã.")
        return

    try:
        spend_num = context.args[0]
    except (IndexError, ValueError):
        formatted_spends = "\n".join(
            f"1. {spend.name} ({spend.amount} ‚ÇΩ) ‚Äî @{spend.spender_user_name}"
            for spend in collection.spends
        )
        await update.effective_chat.send_message(
            f"{formatted_spends}\n\n–í—ã–∑–æ–≤–∏—Ç–µ /unspend@{context.bot.username} –Ω–æ–º–µ—Ä_—Ç—Ä–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π —Ç—Ä–∞—Ç—ã."
        )
        return

    try:
        spend = collection.spends[int(spend_num) - 1]
        context.chat_data["collection"] = collection.without_spend(int(spend_num) - 1)
    except IndexError:
        await update.effective_chat.send_message(
            f"ü§î –ù–µ—Ç —Ç—Ä–∞—Ç—ã —Å –Ω–æ–º–µ—Ä–æ–º {spend_num}."
        )
        return
    
    await update.effective_chat.send_message(f"‚úÖ –¢—Ä–∞—Ç–∞ \"{spend.name}\" –æ—Ç @{spend.spender_user_name} –∑–∞ {spend.amount} ‚ÇΩ —É–¥–∞–ª–µ–Ω–∞.")
