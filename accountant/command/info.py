from pathlib import Path

from telegram import Update
from telegram.constants import ChatType, ParseMode
from telegram.ext import ContextTypes

from ..model.collection import Collection
from ._util import chat_type


@chat_type(ChatType.GROUP)
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    collection: Collection | None = context.chat_data.get("collection")
    if not collection:
        await update.effective_chat.send_message(
            "ü§î –ù–∏–∫–∞–∫–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–µ –±—ã–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–æ.\n\n/help@PiuAccountantBot"
        )
        return

    formatted_spends = "\n".join(
        f"- {spend.name} ({spend.amount} ‚ÇΩ) ‚Äî @{spend.spender_user_name}"
        for spend in collection.spends
    ) or "_–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ_"

    await update.effective_chat.send_message(
        f"""–¢–µ–∫—É—â–∏–π —Å–±–æ—Ä ‚Äî *{collection.name}*
–°–±–æ—Ä —Å–æ–∑–¥–∞–Ω {collection.created_at.strftime("%d.%m.%Y")}

–ö—Ç–æ –Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª—Å—è:
{formatted_spends}
""",
        parse_mode=ParseMode.MARKDOWN,
    )
