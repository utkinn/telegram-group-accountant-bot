from math import floor

from telegram import Update
from telegram.constants import ChatType, ParseMode
from telegram.ext import ContextTypes

from ..model.collection import Collection, Invoice
from ._util import chat_type


@chat_type(ChatType.GROUP)
async def count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.effective_chat.send_message(
            f"ü§î –ù–µ –ø–æ–Ω—è–ª, –∫—Ç–æ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n\n/help@{context.bot.username}"
        )
        return

    collection: Collection | None = context.chat_data.get("collection")
    if not collection:
        await update.effective_chat.send_message(
            f"""ü§î –ù–∏–∫–∞–∫–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–µ –±—ã–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ —Å–±–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π:
/new@{context.bot.username} –Ω–∞–∑–≤–∞–Ω–∏–µ

–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–Ω–æ—Å–∏—Ç—å —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /spend@{context.bot.username} –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã 100
*–ö–æ–º–∞–Ω–¥—É /spend –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –¥–µ–Ω—å–≥–∏ –Ω–∞ —á—Ç–æ-—Ç–æ! –ò–Ω–∞—á–µ –æ–Ω–∏ –∑–∞—á—Ç—É—Ç—Å—è –Ω–µ —Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É!*

–°–ø—Ä–∞–≤–∫–∞: /help@{context.bot.username}""",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    if not collection.spends:
        await update.effective_chat.send_message(
            f"""ü§î –ù–µ –∑–∞–Ω–µ—Å–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞—Ç—ã.
            
*–í—Å–µ–º, –∫—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª—Å—è –Ω–∞ {collection.name}:*
–ó–∞–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:

/spend@{context.bot.username} –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã 100

–≥–¥–µ 100 ‚Äî —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö.
""",
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    invoices = collection.spread(len(context.args))

    formatted_spends = "\n".join(
        f"{n}. {spend.name} ({spend.amount} ‚ÇΩ) ‚Äî @{spend.spender_user_name}"
        for (n, spend) in enumerate(collection.spends, start=1)
    )
    payers = list(sorted(set(context.args)))
    formatted_payers = "\n".join(f"- {user_name}" for user_name in payers)
    formatted_payees = _format_payees(context, invoices, context.bot_data)

    # TODO: requisites
    await update.effective_chat.send_message(
        f"""*ü§ë –ù–∞—Å—Ç–∞–ª —á–∞—Å —Ä–∞—Å–ø–ª–∞—Ç—ã –∑–∞ {collection.name}!*
_–î–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞, –ø–æ–¥–∞–π—Ç–µ –∫—Ç–æ-–Ω–∏–±—É–¥—å. –ö—Ç–æ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–µ—Ç. üé©_
–°–±–æ—Ä —Å–æ–∑–¥–∞–Ω {collection.created_at.strftime("%d.%m.%Y")}

–ö—Ç–æ –Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª—Å—è:
{formatted_spends}

–ö—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç:
{formatted_payers}

–ö–æ–º—É —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:
{formatted_payees}

_–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–±–æ—Ä–∞ —É–∫–∞–∑–∞–Ω—ã._
_–ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –∑–∞–∫—Ä–æ–π—Ç–µ —Å–±–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π_\n/cancel@{context.bot.username}.
_–ï—Å–ª–∏ –∑–∞—Ç–µ—Å–∞–ª—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥, —É–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /unspend@{context.bot.username} <–Ω–æ–º–µ—Ä>,
–∑–∞–Ω–µ—Å–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –≤—ã–∑–æ–≤–∏—Ç–µ /count@{context.bot.username} –µ—â–µ —Ä–∞–∑._""",
        parse_mode=ParseMode.MARKDOWN,
    )


def _format_payees(
    context: ContextTypes.DEFAULT_TYPE, invoices: list[Invoice], bot_data: dict
):
    result = "\n".join(_format_payee(invoice, context.bot_data) for invoice in invoices)
    payee_user_names = list(
        sorted(set(invoice.payee_user_name for invoice in invoices))
    )
    payee_user_names_without_requisites = [
        username
        for username in payee_user_names
        if not bot_data.get("requisites", {}).get(username)
    ]
    if payee_user_names_without_requisites:
        result += (
            "\n\nüëã "
            + ", ".join(
                "@" + username for username in payee_user_names_without_requisites
            )
            + ", –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å—Ö–æ–¥–∏—Ç—å –∫–æ –º–Ω–µ –≤ –ª–∏—á–∫—É –∏ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–±–µ –¥–µ–Ω—å–≥–∏. –¢–∞–∫ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ üòâ"
        )
    return result


def _format_payee(invoice: Invoice, bot_data: dict) -> str:
    result = f"- –ü–æ–¥–∞–π—Ç–µ @{invoice.payee_user_name} –ø–æ {floor(invoice.amount)} ‚ÇΩ"
    requisite = bot_data.get("requisites", {}).get(invoice.payee_user_name)
    bank = bot_data.get("preferred_banks", {}).get(invoice.payee_user_name)
    if requisite or bank:
        result += " (" + ", ".join(filter(None, [requisite, bank])) + ")"
    return result
